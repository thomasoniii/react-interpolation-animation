(this["webpackJsonpreact-interpolation-animation"]=this["webpackJsonpreact-interpolation-animation"]||[]).push([[0],{13:function(t,e,n){},14:function(t,e,n){"use strict";n.r(e);var i=n(1),a=n.n(i),s=n(6),r=n.n(s),c=n(2),o=n(3),h=n(4),l=function(t){var e=t.percent,n=t.from,i=t.to;return n+Math.min(1,e)*(i-n)},d=function(t,e){return void 0!==e&&t!==e},u=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=n.getDelta,s=void 0===a?l:a,r=n.duration,c=void 0===r?500:r,o=n.getHasChanges,h=void 0===o?d:o,u=n.initial,j=Object(i.useRef)(performance.now()),p=Object(i.useRef)(u),b=Object(i.useRef)({}),x=h(t,p.current);x&&b.current.frame&&(cancelAnimationFrame(b.current.frame),p.current=b.current.delta,b.current={}),Object(i.useEffect)((function(){j.current=void 0;var n=p.current;x&&(b.current.frame=requestAnimationFrame((function i(a){if(j.current=j.current||a,(a-=j.current)<c){var r=s({from:n,to:t,percent:a/c});e((function(){return r})),b.current.delta=r,b.current.frame=requestAnimationFrame(i)}else e((function(){return t})),p.current=t,b.current={}}))),p.current=t}),[x])},j="animator-initial",p=function(t){var e=t.values,n=void 0===e?[]:e,s=t.duration,r=void 0===s?500:s,d=t.child,p=t.easing,b=void 0===p?{}:p,x=t.defaultEasing,v=void 0===x?l:x,m=t.initial,g=void 0===m?{}:m,O=n.reduce((function(t,e){return Object(o.a)(Object(o.a)({},t),{},Object(h.a)({},e,d.props[e]))}),{}),w={},f=d.props[j]||{};n.forEach((function(t){var e,n;w[t]=null!==(e=null!==(n=f[t])&&void 0!==n?n:g[t])&&void 0!==e?e:O[t]}));var y=Object(i.useState)(w),S=Object(c.a)(y,2),C=S[0],T=S[1];return u(O,T,{getHasChanges:function(t,e){return Boolean(Object.keys(t).find((function(n){return e&&t[n]!==e[n]})))},duration:r,initial:w,getDelta:function(t){var e=t.percent,n=t.from,i=t.to;return Object.keys(i).reduce((function(t,a){var s=(b[a]||v)({from:n[a],to:i[a],percent:e,value:a});return Object(o.a)(Object(o.a)({},t),{},Object(h.a)({},a,s))}),{})}}),a.a.cloneElement(d,Object(o.a)(Object(o.a)({},C),{},Object(h.a)({},j,void 0)))},b=n(0),x=function(t){var e=Object(o.a)({},t);return delete e.children,a.a.Children.map(t.children,(function(t){return Object(b.jsx)(p,Object(o.a)(Object(o.a)({},e),{},{child:t}))}))},v=function(t){var e=Object(o.a)({duration:500},t);return a.a.Children.count(e.children)>1?Object(b.jsx)(x,Object(o.a)({},e)):Object(b.jsx)(p,Object(o.a)(Object(o.a)({},e),{},{child:a.a.Children.only(e.children)}))},m=n(7),g=["render"],O=function(t){return(0,t.render)(Object(m.a)(t,g))},w=(n(13),function(t){var e=t.x,n=t.y,a=t.width,s=void 0===a?25:a,r=t.height,o=void 0===r?25:r,h=t.fill,l=void 0===h?"blue":h,d=Object(i.useState)(e),j=Object(c.a)(d,2),p=j[0],x=j[1];u(e,x);var v=Object(i.useState)(e),m=Object(c.a)(v,2),g=m[0],O=m[1];return u(n,O),Object(b.jsx)("rect",{x:p,y:g,width:s,height:o,fill:l})}),f='\n<svg\n  viewBox="0 0 100 100"\n  xmlns="http://www.w3.org/2000/svg"\n  width="100"\n  height="100"\n>\n  <rect x="10" y="10" width="25" height="25" fill="blue" />\n</svg>\n  ';var y=function(){var t=Object(i.useState)(25),e=Object(c.a)(t,2),n=e[0],a=e[1],s=Object(i.useState)(n),r=Object(c.a)(s,2),o=r[0],h=r[1],l=Object(i.useState)(25),d=Object(c.a)(l,2),u=d[0],j=d[1],p=Object(i.useState)(u),x=Object(c.a)(p,2),m=x[0],g=x[1],y=Object(i.useState)(25),S=Object(c.a)(y,2),C=S[0],T=S[1],I=Object(i.useState)(C),W=Object(c.a)(I,2),k=W[0],A=W[1],H=Object(i.useState)(25),N=Object(c.a)(H,2),B=N[0],U=N[1],Y=Object(i.useState)(B),R=Object(c.a)(Y,2),X=R[0],M=R[1],E=Object(i.useState)(0),F=Object(c.a)(E,2),J=F[0],L=F[1],_=Object(i.useState)(J),q=Object(c.a)(_,2),D=q[0],G=q[1],P=Object(i.useState)("This is some sample text"),V=Object(c.a)(P,2),$=V[0],z=V[1],K=Object(i.useState)($),Q=Object(c.a)(K,2),Z=Q[0],tt=Q[1],et=Object(i.useState)(10),nt=Object(c.a)(et,2),it=nt[0],at=nt[1],st=Object(i.useState)(it),rt=Object(c.a)(st,2),ct=rt[0],ot=rt[1],ht=Object(i.useState)(10),lt=Object(c.a)(ht,2),dt=lt[0],ut=lt[1],jt=Object(i.useState)(dt),pt=Object(c.a)(jt,2),bt=pt[0],xt=pt[1],vt=Object(i.useState)(25),mt=Object(c.a)(vt,2),gt=mt[0],Ot=mt[1],wt=Object(i.useState)(gt),ft=Object(c.a)(wt,2),yt=ft[0],St=ft[1],Ct=Object(i.useState)(25),Tt=Object(c.a)(Ct,2),It=Tt[0],Wt=Tt[1],kt=Object(i.useState)(It),At=Object(c.a)(kt,2),Ht=At[0],Nt=At[1];return Object(b.jsxs)("div",{className:"App",children:[Object(b.jsxs)("div",{style:{gridColumnStart:"span 2"},className:"header",children:["Here are some examples of what you can do with"," ",Object(b.jsx)("a",{href:"https://github.com/thomasoniii/react-interpolation-animation",target:"_blank",rel:"noreferrer",children:"react-interpolation-animation"}),"."]}),Object(b.jsxs)("div",{className:"code",children:[Object(b.jsx)("div",{children:"Let's start with a simple example, an SVG with a box in it."}),Object(b.jsx)("code",{children:f})]}),Object(b.jsx)("div",{className:"example",dangerouslySetInnerHTML:{__html:f}}),Object(b.jsxs)("div",{className:"code",children:[Object(b.jsx)("div",{children:"Now we'll make it interactive, but not use react-interpolation-animation. Just give it a text field and a button for the user to change the value. This works, but there is no animation so it may be jarring."}),Object(b.jsx)("code",{children:'\n  const [width, setWidth] = useState(25)\n  const [tempWidth, setTempWidth] = useState(width)\n  <svg\n    viewBox="0 0 100 100"\n    xmlns="http://www.w3.org/2000/svg"\n    width="100"\n    height="100"\n  >\n    <rect x="10" y="10" width={width} height="25" fill="blue" />\n  </svg>\n  <div>\n    <input type = "text" value = {tempWidth} onChange={e => setTempWidth(parseInt(e.target.value, 10))} />\n    <button onClick ={() => setWidth(tempWidth)}>Update width</button>\n  </div>\n    '})]}),Object(b.jsxs)("div",{className:"example",children:[Object(b.jsx)("svg",{viewBox:"0 0 100 100",xmlns:"http://www.w3.org/2000/svg",width:"100",height:"100",children:Object(b.jsx)("rect",{x:"10",y:"10",width:n,height:"25",fill:"blue"})}),Object(b.jsxs)("div",{children:[Object(b.jsx)("input",{type:"text",value:o,onChange:function(t){return h(t.target.value)}}),Object(b.jsx)("button",{onClick:function(){return a(parseInt(o,10))},children:"Update width"})]})]}),Object(b.jsxs)("div",{className:"code",children:[Object(b.jsx)("div",{children:"Fortunately, this is exactly what our <Animator> component does. Just wrap the rect in Animator and watch the width smoothly transition."}),Object(b.jsx)("code",{children:'\n  const [width, setWidth] = useState(25)\n  const [tempWidth, setTempWidth] = useState(width)\n  <svg\n    viewBox="0 0 100 100"\n    xmlns="http://www.w3.org/2000/svg"\n    width="100"\n    height="100"\n  >\n    <Animator values = {["width"]}>\n      <rect x="10" y="10" width={width} height="25" fill="blue" />\n    </Animator>\n  </svg>\n  <div>\n    <input type = "text" value = {tempWidth} onChange={e => setTempWidth(parseInt(e.target.value, 10))} />\n    <button onClick ={() => setWidth(tempWidth)}>Update width</button>\n  </div>\n        '})]}),Object(b.jsxs)("div",{className:"example",children:[Object(b.jsx)("svg",{viewBox:"0 0 100 100",xmlns:"http://www.w3.org/2000/svg",width:"100",height:"100",children:Object(b.jsx)(v,{values:["width"],children:Object(b.jsx)("rect",{x:"10",y:"10",width:u,height:"25",fill:"blue"})})}),Object(b.jsxs)("div",{children:[Object(b.jsx)("input",{type:"text",value:m,onChange:function(t){return g(t.target.value)}}),Object(b.jsx)("button",{onClick:function(){return j(parseInt(m,10))},children:"Update width"})]})]}),Object(b.jsxs)("div",{className:"code",children:[Object(b.jsx)("div",{children:"But you can also animate multiple values at once!"}),Object(b.jsx)("code",{children:'\n  const [width, setWidth] = useState(25)\n  const [tempWidth, setTempWidth] = useState(width)\n  const [height, setHeight] = useState(25)\n  const [tempHeight, setTempHeight] = useState(height)\n  <svg\n    viewBox="0 0 100 100"\n    xmlns="http://www.w3.org/2000/svg"\n    width="100"\n    height="100"\n  >\n    \x3c!--\n      simply pass the "height" key here to interpolate on it.\n      If height is not specified, then the width would animate but the height would jump.\n    --\x3e\n    <Animator values = {["width", "height"]}>\n      <rect x="10" y="10" width={width} height={height} fill="blue" />\n    </Animator>\n  </svg>\n  <div>\n    <input type = "text" value = {tempWidth} onChange={e => setTempWidth(parseInt(e.target.value, 10))} />\n    <input type = "text" value = {tempHeight} onChange={e => setTempHeight(parseInt(e.target.value, 10))} />\n    <button onClick ={() => {setWidth(tempWidth); setHeight(tempHeight)}}>Update dimensions</button>\n  </div>\n        '})]}),Object(b.jsxs)("div",{className:"example",children:[Object(b.jsx)("svg",{viewBox:"0 0 100 100",xmlns:"http://www.w3.org/2000/svg",width:"100",height:"100",children:Object(b.jsx)(v,{values:["width","height"],children:Object(b.jsx)("rect",{x:"10",y:"10",width:C,height:B,fill:"blue"})})}),Object(b.jsxs)("div",{children:[Object(b.jsx)("input",{type:"text",value:k,onChange:function(t){return A(t.target.value)}}),"x",Object(b.jsx)("input",{type:"text",value:X,onChange:function(t){return M(t.target.value)}}),Object(b.jsx)("button",{onClick:function(){T(parseInt(k,10)),U(parseInt(X,10))},children:"Update dimensions"})]})]}),Object(b.jsxs)("div",{className:"code",children:[Object(b.jsx)("div",{children:"You can also animate across multiple children"}),Object(b.jsx)("code",{children:'\n  const [width, setWidth] = useState(25)\n  const [tempWidth, setTempWidth] = useState(width)\n  const [height, setHeight] = useState(25)\n  const [tempHeight, setTempHeight] = useState(height)\n  <svg\n    viewBox="0 0 100 100"\n    xmlns="http://www.w3.org/2000/svg"\n    width="100"\n    height="100"\n  >\n    \x3c!--\n      Pass multiple children into the Animator to interpolate them all on the same props.\n    --\x3e\n    <Animator values = {["width", "height"]}>\n      <rect x="10" y="10" width={width} height={height} fill="blue" />\n      <rect x="20" y="50" width={width} height={height} fill="red" />\n    </Animator>\n  </svg>\n  <div>\n    <input type = "text" value = {tempWidth} onChange={e => setTempWidth(parseInt(e.target.value, 10))} />\n    <input type = "text" value = {tempHeight} onChange={e => setTempHeight(parseInt(e.target.value, 10))} />\n    <button onClick ={() => {setWidth(tempWidth); setHeight(tempHeight)}}>Update dimensions</button>\n  </div>'})]}),Object(b.jsxs)("div",{className:"example",children:[Object(b.jsx)("svg",{viewBox:"0 0 100 100",xmlns:"http://www.w3.org/2000/svg",width:"100",height:"100",children:Object(b.jsxs)(v,{values:["width","height"],children:[Object(b.jsx)("rect",{x:"10",y:"10",width:gt,height:It,fill:"blue"}),Object(b.jsx)("rect",{x:"20",y:"50",width:gt,height:It,fill:"red"})]})}),Object(b.jsxs)("div",{children:[Object(b.jsx)("input",{type:"text",value:yt,onChange:function(t){return St(t.target.value)}}),"x",Object(b.jsx)("input",{type:"text",value:Ht,onChange:function(t){return Nt(t.target.value)}}),Object(b.jsx)("button",{onClick:function(){Ot(parseInt(yt,10)),Wt(parseInt(Ht,10))},children:"Update dimensions"})]})]}),Object(b.jsxs)("div",{className:"code",children:[Object(b.jsx)("div",{children:"The AnimationConsumer can help you pass values to children, even if the child doesn't use the animated prop directly."}),Object(b.jsx)("code",{children:'\n  const [rotate, setRotate] = useState(0)\n  const [tempRotate, setTempRotate] = useState(rotate)\n  <svg\n    viewBox="0 0 100 100"\n    xmlns="http://www.w3.org/2000/svg"\n    width="100"\n    height="100"\n  >\n    \x3c!--\n      Set up an Animator on rotate, as usual.\n      Then let the AnimationConsumer pass that rotate prop onto its children,\n      who can use it to build a string, in this case.\n    --\x3e\n    <Animator values = {["rotate"]}>\n      <AnimationConsumer\n        rotate={rotate}\n        render={({ rotate }) => (\n          <g transform={`rotate(${rotate},25,25)`}>\n            <rect x="10" y="10" width="30" height="30" fill="blue" />\n          </g>\n        )}\n      />\n    </Animator>\n  </svg>\n  <div>\n    <input type = "text" value = {tempRotate} onChange={e => setTempRotate(parseInt(e.target.value, 10))} />\n    <button onClick ={() => {setRotate(tempRotate)}}>Update rotation</button>\n  </div>\n        '})]}),Object(b.jsxs)("div",{className:"example",children:[Object(b.jsx)("svg",{viewBox:"0 0 100 100",xmlns:"http://www.w3.org/2000/svg",width:"100",height:"100",children:Object(b.jsx)(v,{values:["rotate"],children:Object(b.jsx)(O,{rotate:J,render:function(t){var e=t.rotate;return Object(b.jsx)("g",{transform:"rotate(".concat(e,",25,25)"),children:Object(b.jsx)("rect",{x:"10",y:"10",width:"30",height:"30",fill:"blue"})})}})})}),Object(b.jsxs)("div",{children:[Object(b.jsx)("input",{type:"text",value:D,onChange:function(t){return G(parseInt(t.target.value,10))}}),Object(b.jsx)("button",{onClick:function(){L(D)},children:"Update rotation"})]})]}),Object(b.jsxs)("div",{className:"code",children:[Object(b.jsx)("div",{children:"Custom easing functions can let you interpolate any values. Let's animate some text typing!"}),Object(b.jsx)("code",{children:'\n<div>\n  <input\n    type="text"\n    value={tempText}\n    onChange={(e) => setTempText(e.target.value)}\n  />\n  <button\n    onClick={() => {\n      setText(tempText)\n    }}\n  >\n    Update text\n  </button>\n</div>\n<div>\n  <Animator\n    values={["text"]}\n    duration={5000}\n    defaultEasing={({ from, to, percent }) => {\n      let i = 0\n      while (from.charAt(i) === to.charAt(i)) {\n        i++\n      }\n      if (percent < 0.5) {\n        return from.substr(\n          0,\n          i + Math.floor((1 - percent * 2) * (from.length - i))\n        )\n      } else {\n        return to.substr(\n          0,\n          i + Math.floor((percent - 0.5) * 2 * (to.length - i))\n        )\n      }\n    }}\n  >\n    <AnimationConsumer\n      text={Text}\n      render={({ text }) => <span>{text}</span>}\n    />\n  </Animator>\n</div>\n      '})]}),Object(b.jsxs)("div",{className:"example",children:[Object(b.jsxs)("div",{children:[Object(b.jsx)("input",{type:"text",value:Z,onChange:function(t){return tt(t.target.value)}}),Object(b.jsx)("button",{onClick:function(){z(Z)},children:"Update text"})]}),Object(b.jsx)("div",{children:Object(b.jsx)(v,{values:["text"],duration:5e3,defaultEasing:function(t){for(var e=t.from,n=t.to,i=t.percent,a=0;e.charAt(a)===n.charAt(a);)a++;return i<.5?e.substr(0,a+Math.floor((1-2*i)*(e.length-a))):n.substr(0,a+Math.floor(2*(i-.5)*(n.length-a)))},children:Object(b.jsx)(O,{text:$,render:function(t){var e=t.text;return Object(b.jsx)("span",{children:e})}})})})]}),Object(b.jsxs)("div",{className:"code",children:[Object(b.jsx)("div",{children:"The useInterpolate hook may make sense for your project, if you want to handle animation completely within a component."}),Object(b.jsx)("code",{children:'\n  const MyRect = ({ x, y, width = 25, height = 25, fill = "blue" }) => {\n    const [interpolatedX, setInterpolatedX] = useState(x)\n    useInterpolate(x, setInterpolatedX)\n\n    const [interpolatedY, setInterpolatedY] = useState(x)\n    useInterpolate(y, setInterpolatedY)\n\n    return (\n      <rect\n        x={interpolatedX}\n        y={interpolatedY}\n        width={width}\n        height={height}\n        fill={fill}\n      />\n    )\n  }\n\n  const [x, setX] = useState(10)\n  const [tempX, setTempX] = useState(x)\n  const [Y, setY] = useState(10)\n  const [tempY, setTempY] = useState(y)\n  <svg\n    viewBox="0 0 100 100"\n    xmlns="http://www.w3.org/2000/svg"\n    width="100"\n    height="100"\n  >\n    <MyRect x={x} y={y} />\n  </svg>\n  <div>\n    <input type = "text" value = {tempX} onChange={e => setTempX(parseInt(e.target.value, 10))} />\n    <input type = "text" value = {tempY} onChange={e => setTempY(parseInt(e.target.value, 10))} />\n    <button onClick ={() => {setX(tempX); setY(tempY)}}>Update coordinates</button>\n  </div>\n        '})]}),Object(b.jsxs)("div",{className:"example",children:[" ",Object(b.jsx)("svg",{viewBox:"0 0 100 100",xmlns:"http://www.w3.org/2000/svg",width:"100",height:"100",children:Object(b.jsx)(w,{x:it,y:dt})}),Object(b.jsxs)("div",{children:[Object(b.jsx)("input",{type:"text",value:ct,onChange:function(t){return ot(parseInt(t.target.value,10))}}),Object(b.jsx)("input",{type:"text",value:bt,onChange:function(t){return xt(parseInt(t.target.value,10))}}),Object(b.jsx)("button",{onClick:function(){at(ct),ut(bt)},children:"Update coordinates"})]})]}),Object(b.jsxs)("div",{style:{gridColumnStart:"span 2"},className:"header",children:[Object(b.jsx)("div",{children:"And that's it! Have fun, and read the source if you get stuck - there are lots of comments as well as additional options that you can use to govern easing functions, initial values, and duration."}),Object(b.jsx)("div",{children:"Use either the HOC wrapper or the hook - go with whatever works easiest for your project. Enjoy!"})]})]})};r.a.render(Object(b.jsx)(a.a.StrictMode,{children:Object(b.jsx)(y,{})}),document.getElementById("root"))}},[[14,1,2]]]);
//# sourceMappingURL=main.fabce7e7.chunk.js.map