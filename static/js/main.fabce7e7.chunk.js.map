{"version":3,"sources":["useInterpolate.js","Animation.js","constants.js","AnimationGroup.js","Animator.js","AnimationConsumer.js","App.js","index.js"],"names":["animatorDefaultEasing","percent","from","to","Math","min","defaultHasChanges","current","previous","undefined","useInterpolate","setter","getDelta","duration","getHasChanges","initial","startTime","useRef","performance","now","lastFrame","hasChanges","frame","cancelAnimationFrame","delta","useEffect","prevVals","requestAnimationFrame","animate","time","newDelta","ANIMATOR_INITIAL","Animation","values","child","easing","defaultEasing","reduce","bucket","v","props","fullInitial","childInit","forEach","useState","localValues","setLocalValues","c","Boolean","Object","keys","find","key","newValue","value","React","cloneElement","AnimationGroup","args","children","Children","map","Animator","count","only","AnimationConsumer","render","MyRect","x","y","width","height","fill","interpolatedX","setInterpolatedX","interpolatedY","setInterpolatedY","example1","App","ex2Width","setEx2Width","tempEx2Width","setTempEx2Width","ex3Width","setEx3Width","tempEx3Width","setTempEx3Width","ex4Width","setEx4Width","tempEx4Width","setTempEx4Width","ex4Height","setEx4Height","tempEx4Height","setTempEx4Height","ex5Rotate","setEx5Rotate","tempEx5Rotate","setTempEx5Rotate","ex6Text","setEx6Text","tempEx6Text","setTempEx6Text","ex7X","setEx7X","tempEx7X","setTempEx7X","ex7Y","setEx7Y","tempEx7Y","setTempEx7Y","ex9Width","setEx9Width","tempEx9Width","setTempEx9Width","ex9Height","setEx9Height","tempEx9Height","setTempEx9Height","className","style","gridColumnStart","href","target","rel","dangerouslySetInnerHTML","__html","viewBox","xmlns","type","onChange","e","onClick","parseInt","rotate","transform","i","charAt","substr","floor","length","text","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fabce7e7.chunk.js","sourcesContent":["import { useRef, useEffect } from \"react\"\n\n/*\n  This is the meat of the library.\n  Set it up in your component like this:\n\n  const SomeReactComponent( { someValue } ) => {\n\n    // make a local copy of the variable that you're going to interpolate.\n    const [interpolatedSomeValue, setInterpolatedSomeValue] = useState(someValue);\n\n    // and then actually interpolate it.\n    useInterpolate(someValue, setInterpolatedSomeValue)\n\n    // later, when you would have done this:\n    // <div width = {someValue}>Some DIV element</div>\n    // instead do this:\n    <div width={interpolatedSomeValue}>Some DIV element</div>\n\n    // And you are done.\n  }\n\n  There is a third argument - an options object which you can pass along:\n\n    getDelta - should be a function which accepts a single object, which contains\n      three values - { to, from, percent }\n      to is the value at the start of the interpolation\n      from is the value at the end of the interpolation\n      percent is a float from 0->1 showing how far along the animation we are.\n      Pass this arg to change easing speed or animation effects, such as to use\n      a quadratic ease function or animate text typing.\n\n    duration - length of the animation in ms\n\n    getHasChanges - a function to determine if there are changes to the values.\n      should accept an object with two keys - current and previous\n      current is an object with key/value mapping at the end of the interpolation.\n      previous is an object with key/value mapping when the interpolation started.\n\n    initial - sometimes you want an interpolation to start from a different value\n      than the one initially set on the component when it is first mounted.\n      You can pass in a set of initial values to use here.\n\n*/\n\n/*\n  The default delta easing. Given percent, from, and to.\n  Returns a value between from and to, at a given percentage, with linear easing.\n\n  e.g.,\n  animatorDefaultEasing({from : 50, to : 100, percent : .5})\n  // returns 75, since it's halfway between 50 and 100.\n\n  You can use this function if it is useful to you, and otherwise provide your own.\n*/\nexport const animatorDefaultEasing = ({ percent, from, to }) => {\n  return from + Math.min(1, percent) * (to - from)\n}\n\n/*\n  By default, if we have no previous values, we have no changes.\n  otherwise, if the two objects are not identical, we have changes.\n*/\nconst defaultHasChanges = (current, previous) =>\n  previous !== undefined && current !== previous\n\nconst useInterpolate = (\n  current,\n  setter,\n  {\n    getDelta = animatorDefaultEasing,\n    duration = 500,\n    getHasChanges = defaultHasChanges,\n    initial,\n  } = {}\n) => {\n  // requestAnimationFrame starts ticking as soon as the page is loaded. We'll need\n  // to do conversions between absolute page load time vs relative interpolation time.\n  const startTime = useRef(performance.now())\n\n  // keep track of the last set of values at the start of the interpolation, defaulting\n  // to the initial values.\n  const previous = useRef(initial)\n\n  // keep track of the last frame of animation, in case we want to cancel it.\n  const lastFrame = useRef({})\n\n  // and further key each animation so we won't accidentally re-run something.\n  // const renderKey = useRef(1)\n\n  const hasChanges = getHasChanges(current, previous.current)\n\n  // if we have changes and are re-interpolating AND an animation frame is pending,\n  // then cancel it out and set our \"last\" values to wherever the interpolation had\n  // moved us to at that point. Then wipe out our lastFrame.\n  if (hasChanges && lastFrame.current.frame) {\n    cancelAnimationFrame(lastFrame.current.frame)\n    previous.current = lastFrame.current.delta\n    lastFrame.current = {}\n  }\n\n  // we enter the effect when hasChanges has changed.\n  useEffect(() => {\n    // blank out our last startTime, since we'll rewrite it in the animation frame.\n    startTime.current = undefined\n\n    // keep a ref to our previous values.\n    const prevVals = previous.current\n\n    // and increment our renderKey.\n    // const myKey = renderKey.current++\n\n    // the effect fires if hasChanges has changed. But we don't actually want to\n    // fire the animation unless hasChanges is actually true.\n    if (hasChanges) {\n      // request an animation frame and save it.\n      lastFrame.current.frame = requestAnimationFrame(function animate(time) {\n        // this is disabled for now for more testing.\n        /*\n        if (myKey !== renderKey.current) {\n          return;\n        }\n        //*/\n\n        // save the startTime on the first frame if we need to.\n        startTime.current = startTime.current || time\n\n        // and convert from absolute page time to relative interpolation time.\n        time -= startTime.current\n\n        // if our current time < duration, we're still interpolating.\n        // get newDelta values, call the setter with them, and save them along\n        // with requesting a new frame.\n        if (time < duration) {\n          const newDelta = getDelta({\n            from: prevVals,\n            to: current,\n            percent: time / duration,\n          })\n\n          setter(() => newDelta)\n          lastFrame.current.delta = newDelta\n\n          lastFrame.current.frame = requestAnimationFrame(animate)\n        } else {\n          // otherwise, we've the duration. So we just call the setter with our final\n          // values, update our previous value, and wipe out the last frame.\n          setter(() => current)\n          previous.current = current\n          lastFrame.current = {}\n        }\n      })\n    }\n\n    // always save the new current values as the previous ones whenever we enter.\n    previous.current = current\n    // eslint-disable-next-line\n  }, [hasChanges]);\n}\n\nexport default useInterpolate\n","import React, { useState } from \"react\"\nimport useInterpolate, { animatorDefaultEasing } from \"./useInterpolate\"\n\nimport { DEFAULT_DURATION } from \"./constants\"\n\n/*\n  I'm playing around with how I want to structure this code.\n  For now, an Animation is identical to an AnimationGroup, except it only accepts\n  one component via a render prop instead of a list of children.\n\n  You probably don't want to use this directly and probably want to import Animator\n  instead.\n\n  In fact, go look at the more thorough documentation over in Animator.\n*/\n\nconst ANIMATOR_INITIAL = \"animator-initial\"\n\nconst Animation = ({\n  values = [],\n  duration = DEFAULT_DURATION,\n  child,\n  easing = {},\n  defaultEasing = animatorDefaultEasing,\n  initial = {},\n}) => {\n  // given our values array, look to the child to figure out our current values.\n  const current = values.reduce((bucket, v) => {\n    return { ...bucket, [v]: child.props[v] }\n  }, {})\n\n  // we're going to build a new initial object\n  const fullInitial = {}\n  // pull out any initial values set on the child\n  const childInit = child.props[ANIMATOR_INITIAL] || {}\n\n  // now iterate over our values (which is a list of keys)\n  // and set the initial value to the child's init value, our component init value, or the\n  // child's current prop value.\n  values.forEach((v) => {\n    fullInitial[v] = childInit[v] ?? initial[v] ?? current[v]\n  })\n\n  // standard useInterpolate call - save localValues to hand through to the child.\n  const [localValues, setLocalValues] = useState(fullInitial)\n  useInterpolate(current, setLocalValues, {\n    // here we have changes if any key in our current set of values has changed from\n    // our last set of values.\n    //\n    // remember - this is not all props on the child, this is just the props in our\n    // values array.\n    getHasChanges: (c, previous) =>\n      Boolean(\n        Object.keys(c).find((key) => previous && c[key] !== previous[key])\n      ),\n\n    duration,\n\n    initial: fullInitial,\n\n    // our getDelta function needs to construct a new object with each value interpolated\n    // along the way.\n    getDelta: ({ percent, from, to }) => {\n      return Object.keys(to).reduce((bucket, v) => {\n        const easingFunc = easing[v] || defaultEasing\n        const newValue = easingFunc({\n          from: from[v],\n          to: to[v],\n          percent,\n          value: v,\n        })\n        return {\n          ...bucket,\n          [v]: newValue,\n        }\n      }, {})\n    },\n  })\n\n  // finally, we're going to clone the child with the new props\n  // but toss out the animator-initial value: we don't need it any more and don't\n  // want it writing to the DOM.\n  return React.cloneElement(child, {\n    ...localValues,\n    [ANIMATOR_INITIAL]: undefined,\n  })\n}\n\nexport default Animation\n","export const DEFAULT_DURATION = 500\n","/*\n  I'm playing around with how I want to structure this code.\n  For now, an AnimationGroup is identical to an Animation, except it allows you\n  to vend an animation out to multiple children. Animation only vends to one.\n\n  You probably don't want to use this directly and probably want to import Animator\n  instead.\n\n  In fact, go look at the more thorough documentation over in Animator.\n*/\n\nimport React from \"react\"\nimport Animation from \"./Animation\"\n\nconst AnimationGroup = (props) => {\n  const args = { ...props }\n  delete args.children\n  return React.Children.map(props.children, (child) => (\n    <Animation {...args} child={child} />\n  ))\n}\n\nexport default AnimationGroup\n","import React from \"react\"\nimport Animation from \"./Animation\"\nimport AnimationGroup from \"./AnimationGroup\"\n\nimport { DEFAULT_DURATION } from \"./constants\"\n\n/*\n  I'm playing around with how I want to structure this code.\n  For now, just use Animator and it'll work with as many children as you pass it,\n  deferring the actual work to an Animation or AnimationGroup component.\n\n  Say you have this element in an SVG graphic:\n  <rect x = {0} y = {10} width = {width} height = {10} fill = \"blue\" />\n\n  And you want to animate that width value, so when you change the value, the bar\n  animates to the new size. All you need to do is wrapper it with an Animator.\n\n  <Animator values = {[\"width\"]}>\n    <rect x = {x} y = {y} width = {width} height = {10} fill = \"blue\" />\n  </Animator>\n\n  If you want to animate all of those variables:\n  <Animator values = {[\"width\", \"x\", \"y\"]}>\n    <rect x = {x} y = {y} width = {width} height = {10} fill = \"blue\" />\n  </Animator>\n\n  Now if any (or all!) of x, y, or width change, it'll animate to the new position.\n\n  Animator (and the other verions it wrappers) accepts several props:\n\n    values - an array of strings to watch for changes. These props MUST be named\n      on the child components for them to be handed through.\n    duration - length of the interpolation duration in ms. Defaults to 500\n    easing - an object of { [value] : easingFunction }\n      the easingFunction is the same as the getDelta function in useInterpolate.\n      Accepts an arg of a single object of {from, to, percent}\n    defaultEasing - change the default easing used if a specific easing for a given\n      value is not provided.\n    initial - an object containing { [value] : initialValue } This is optional.\n      The initial object is used if you want to start from a different position.\n\n      For example:\n        <Animator values = {[\"x\"]}>\n          <rect x = {x} y = {0} width = {50} height = {50} />\n        </Animator>\n\n      Let's say the first time you mount the component, x = 50. It will draw immediately\n      at x ={50} w/o animation.\n\n      initial is used to provide that first transition into the DOM.\n        <Animator values = {[\"x\"]} initial = {{x : 0}}>\n          <rect x = {x} y = {0} width = {50} height = {50} />\n        </Animator>\n      This will mount the component with an x value of 0 and then interpolate it until it\n      reaches 50.\n\n      This is to keep your data value (which is x = 50) separate from a sugared animation value\n      (have it fly in from 0)\n\n    It's possible that child components should animate starting at different positions.\n    Animator looks for a prop on its children called `animator-initial`. If present, initial\n    values in there will be used.\n\n    The precedence for an intial value is:\n      child.animator-initial[value]\n      Animator.initial[value]\n      child.props[value]\n\n*/\n\nconst Animator = (props) => {\n  const args = {\n    duration: DEFAULT_DURATION,\n    ...props,\n  }\n\n  return React.Children.count(args.children) > 1 ? (\n    <AnimationGroup {...args} />\n  ) : (\n    <Animation {...args} child={React.Children.only(args.children)} />\n  )\n}\n\nexport default Animator\n","/*\n  very simple component, just around as a reflector. Takes a render prop, then hands\n  all props it was given through to that render prop.\n\n  This is useful for cases where you want to provide an interpolated value to a child\n  component, but NOT as a prop of that component.\n\n  Or just roll your own flavor of this, I'm not your dad.\n*/\nconst AnimationConsumer = ({ render, ...props }) => {\n  return render(props)\n}\n\nexport default AnimationConsumer\n","import React, { useState } from \"react\"\n\nimport Animator from \"./Animator\"\nimport AnimationConsumer from \"./AnimationConsumer\"\nimport useInterpolate from \"./useInterpolate\"\n\n/* eslint-disable react/no-danger */\n\nimport \"./App.css\"\n\n// eslint-disable-next-line\nconst MyRect = ({ x, y, width = 25, height = 25, fill = \"blue\" }) => {\n  const [interpolatedX, setInterpolatedX] = useState(x)\n  useInterpolate(x, setInterpolatedX)\n\n  const [interpolatedY, setInterpolatedY] = useState(x)\n  useInterpolate(y, setInterpolatedY)\n\n  return (\n    <rect\n      x={interpolatedX}\n      y={interpolatedY}\n      width={width}\n      height={height}\n      fill={fill}\n    />\n  )\n}\n\nconst example1 = `\n<svg\n  viewBox=\"0 0 100 100\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  width=\"100\"\n  height=\"100\"\n>\n  <rect x=\"10\" y=\"10\" width=\"25\" height=\"25\" fill=\"blue\" />\n</svg>\n  `\n\nconst example2 = `\n  const [width, setWidth] = useState(25)\n  const [tempWidth, setTempWidth] = useState(width)\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100\"\n    height=\"100\"\n  >\n    <rect x=\"10\" y=\"10\" width={width} height=\"25\" fill=\"blue\" />\n  </svg>\n  <div>\n    <input type = \"text\" value = {tempWidth} onChange={e => setTempWidth(parseInt(e.target.value, 10))} />\n    <button onClick ={() => setWidth(tempWidth)}>Update width</button>\n  </div>\n    `\n\nconst example3 = `\n  const [width, setWidth] = useState(25)\n  const [tempWidth, setTempWidth] = useState(width)\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100\"\n    height=\"100\"\n  >\n    <Animator values = {[\"width\"]}>\n      <rect x=\"10\" y=\"10\" width={width} height=\"25\" fill=\"blue\" />\n    </Animator>\n  </svg>\n  <div>\n    <input type = \"text\" value = {tempWidth} onChange={e => setTempWidth(parseInt(e.target.value, 10))} />\n    <button onClick ={() => setWidth(tempWidth)}>Update width</button>\n  </div>\n        `\n\nconst example4 = `\n  const [width, setWidth] = useState(25)\n  const [tempWidth, setTempWidth] = useState(width)\n  const [height, setHeight] = useState(25)\n  const [tempHeight, setTempHeight] = useState(height)\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100\"\n    height=\"100\"\n  >\n    <!--\n      simply pass the \"height\" key here to interpolate on it.\n      If height is not specified, then the width would animate but the height would jump.\n    -->\n    <Animator values = {[\"width\", \"height\"]}>\n      <rect x=\"10\" y=\"10\" width={width} height={height} fill=\"blue\" />\n    </Animator>\n  </svg>\n  <div>\n    <input type = \"text\" value = {tempWidth} onChange={e => setTempWidth(parseInt(e.target.value, 10))} />\n    <input type = \"text\" value = {tempHeight} onChange={e => setTempHeight(parseInt(e.target.value, 10))} />\n    <button onClick ={() => {setWidth(tempWidth); setHeight(tempHeight)}}>Update dimensions</button>\n  </div>\n        `\n\nconst example5 = `\n  const [rotate, setRotate] = useState(0)\n  const [tempRotate, setTempRotate] = useState(rotate)\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100\"\n    height=\"100\"\n  >\n    <!--\n      Set up an Animator on rotate, as usual.\n      Then let the AnimationConsumer pass that rotate prop onto its children,\n      who can use it to build a string, in this case.\n    -->\n    <Animator values = {[\"rotate\"]}>\n      <AnimationConsumer\n        rotate={rotate}\n        render={({ rotate }) => (\n          <g transform={\\`rotate(\\${rotate},25,25)\\`}>\n            <rect x=\"10\" y=\"10\" width=\"30\" height=\"30\" fill=\"blue\" />\n          </g>\n        )}\n      />\n    </Animator>\n  </svg>\n  <div>\n    <input type = \"text\" value = {tempRotate} onChange={e => setTempRotate(parseInt(e.target.value, 10))} />\n    <button onClick ={() => {setRotate(tempRotate)}}>Update rotation</button>\n  </div>\n        `\n\nconst example6 = `\n<div>\n  <input\n    type=\"text\"\n    value={tempText}\n    onChange={(e) => setTempText(e.target.value)}\n  />\n  <button\n    onClick={() => {\n      setText(tempText)\n    }}\n  >\n    Update text\n  </button>\n</div>\n<div>\n  <Animator\n    values={[\"text\"]}\n    duration={5000}\n    defaultEasing={({ from, to, percent }) => {\n      let i = 0\n      while (from.charAt(i) === to.charAt(i)) {\n        i++\n      }\n      if (percent < 0.5) {\n        return from.substr(\n          0,\n          i + Math.floor((1 - percent * 2) * (from.length - i))\n        )\n      } else {\n        return to.substr(\n          0,\n          i + Math.floor((percent - 0.5) * 2 * (to.length - i))\n        )\n      }\n    }}\n  >\n    <AnimationConsumer\n      text={Text}\n      render={({ text }) => <span>{text}</span>}\n    />\n  </Animator>\n</div>\n      `\n\nconst example7 = `\n  const MyRect = ({ x, y, width = 25, height = 25, fill = \"blue\" }) => {\n    const [interpolatedX, setInterpolatedX] = useState(x)\n    useInterpolate(x, setInterpolatedX)\n\n    const [interpolatedY, setInterpolatedY] = useState(x)\n    useInterpolate(y, setInterpolatedY)\n\n    return (\n      <rect\n        x={interpolatedX}\n        y={interpolatedY}\n        width={width}\n        height={height}\n        fill={fill}\n      />\n    )\n  }\n\n  const [x, setX] = useState(10)\n  const [tempX, setTempX] = useState(x)\n  const [Y, setY] = useState(10)\n  const [tempY, setTempY] = useState(y)\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100\"\n    height=\"100\"\n  >\n    <MyRect x={x} y={y} />\n  </svg>\n  <div>\n    <input type = \"text\" value = {tempX} onChange={e => setTempX(parseInt(e.target.value, 10))} />\n    <input type = \"text\" value = {tempY} onChange={e => setTempY(parseInt(e.target.value, 10))} />\n    <button onClick ={() => {setX(tempX); setY(tempY)}}>Update coordinates</button>\n  </div>\n        `\n\nconst example9 = `\n  const [width, setWidth] = useState(25)\n  const [tempWidth, setTempWidth] = useState(width)\n  const [height, setHeight] = useState(25)\n  const [tempHeight, setTempHeight] = useState(height)\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"100\"\n    height=\"100\"\n  >\n    <!--\n      Pass multiple children into the Animator to interpolate them all on the same props.\n    -->\n    <Animator values = {[\"width\", \"height\"]}>\n      <rect x=\"10\" y=\"10\" width={width} height={height} fill=\"blue\" />\n      <rect x=\"20\" y=\"50\" width={width} height={height} fill=\"red\" />\n    </Animator>\n  </svg>\n  <div>\n    <input type = \"text\" value = {tempWidth} onChange={e => setTempWidth(parseInt(e.target.value, 10))} />\n    <input type = \"text\" value = {tempHeight} onChange={e => setTempHeight(parseInt(e.target.value, 10))} />\n    <button onClick ={() => {setWidth(tempWidth); setHeight(tempHeight)}}>Update dimensions</button>\n  </div>`\n\nfunction App() {\n  const [ex2Width, setEx2Width] = useState(25)\n  const [tempEx2Width, setTempEx2Width] = useState(ex2Width)\n\n  const [ex3Width, setEx3Width] = useState(25)\n  const [tempEx3Width, setTempEx3Width] = useState(ex3Width)\n\n  const [ex4Width, setEx4Width] = useState(25)\n  const [tempEx4Width, setTempEx4Width] = useState(ex4Width)\n  const [ex4Height, setEx4Height] = useState(25)\n  const [tempEx4Height, setTempEx4Height] = useState(ex4Height)\n\n  const [ex5Rotate, setEx5Rotate] = useState(0)\n  const [tempEx5Rotate, setTempEx5Rotate] = useState(ex5Rotate)\n\n  const [ex6Text, setEx6Text] = useState(\"This is some sample text\")\n  const [tempEx6Text, setTempEx6Text] = useState(ex6Text)\n\n  const [ex7X, setEx7X] = useState(10)\n  const [tempEx7X, setTempEx7X] = useState(ex7X)\n  const [ex7Y, setEx7Y] = useState(10)\n  const [tempEx7Y, setTempEx7Y] = useState(ex7Y)\n\n  const [ex9Width, setEx9Width] = useState(25)\n  const [tempEx9Width, setTempEx9Width] = useState(ex9Width)\n  const [ex9Height, setEx9Height] = useState(25)\n  const [tempEx9Height, setTempEx9Height] = useState(ex9Height)\n\n  return (\n    <div className=\"App\">\n      <div style={{ gridColumnStart: \"span 2\" }} className=\"header\">\n        Here are some examples of what you can do with{\" \"}\n        <a\n          href=\"https://github.com/thomasoniii/react-interpolation-animation\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          react-interpolation-animation\n        </a>\n        .\n      </div>\n      <div className=\"code\">\n        <div>\n          Let&apos;s start with a simple example, an SVG with a box in it.\n        </div>\n        <code>{example1}</code>\n      </div>\n      <div\n        className=\"example\"\n        dangerouslySetInnerHTML={{ __html: example1 }}\n      ></div>\n\n      <div className=\"code\">\n        <div>\n          Now we&apos;ll make it interactive, but not use\n          react-interpolation-animation. Just give it a text field and a button\n          for the user to change the value. This works, but there is no\n          animation so it may be jarring.\n        </div>\n        <code>{example2}</code>\n      </div>\n      <div className=\"example\">\n        <svg\n          viewBox=\"0 0 100 100\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"100\"\n          height=\"100\"\n        >\n          <rect x=\"10\" y=\"10\" width={ex2Width} height=\"25\" fill=\"blue\" />\n        </svg>\n        <div>\n          <input\n            type=\"text\"\n            value={tempEx2Width}\n            onChange={(e) => setTempEx2Width(e.target.value)}\n          />\n          <button onClick={() => setEx2Width(parseInt(tempEx2Width, 10))}>\n            Update width\n          </button>\n        </div>\n      </div>\n\n      <div className=\"code\">\n        <div>\n          Fortunately, this is exactly what our &lt;Animator&gt; component does.\n          Just wrap the rect in Animator and watch the width smoothly\n          transition.\n        </div>\n        <code>{example3}</code>\n      </div>\n      <div className=\"example\">\n        <svg\n          viewBox=\"0 0 100 100\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"100\"\n          height=\"100\"\n        >\n          <Animator values={[\"width\"]}>\n            <rect x=\"10\" y=\"10\" width={ex3Width} height=\"25\" fill=\"blue\" />\n          </Animator>\n        </svg>\n        <div>\n          <input\n            type=\"text\"\n            value={tempEx3Width}\n            onChange={(e) => setTempEx3Width(e.target.value)}\n          />\n          <button onClick={() => setEx3Width(parseInt(tempEx3Width, 10))}>\n            Update width\n          </button>\n        </div>\n      </div>\n\n      <div className=\"code\">\n        <div>But you can also animate multiple values at once!</div>\n        <code>{example4}</code>\n      </div>\n      <div className=\"example\">\n        <svg\n          viewBox=\"0 0 100 100\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"100\"\n          height=\"100\"\n        >\n          <Animator values={[\"width\", \"height\"]}>\n            <rect\n              x=\"10\"\n              y=\"10\"\n              width={ex4Width}\n              height={ex4Height}\n              fill=\"blue\"\n            />\n          </Animator>\n        </svg>\n        <div>\n          <input\n            type=\"text\"\n            value={tempEx4Width}\n            onChange={(e) => setTempEx4Width(e.target.value)}\n          />\n          x\n          <input\n            type=\"text\"\n            value={tempEx4Height}\n            onChange={(e) => setTempEx4Height(e.target.value)}\n          />\n          <button\n            onClick={() => {\n              setEx4Width(parseInt(tempEx4Width, 10))\n              setEx4Height(parseInt(tempEx4Height, 10))\n            }}\n          >\n            Update dimensions\n          </button>\n        </div>\n      </div>\n\n      <div className=\"code\">\n        <div>You can also animate across multiple children</div>\n        <code>{example9}</code>\n      </div>\n      <div className=\"example\">\n        <svg\n          viewBox=\"0 0 100 100\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"100\"\n          height=\"100\"\n        >\n          <Animator values={[\"width\", \"height\"]}>\n            <rect\n              x=\"10\"\n              y=\"10\"\n              width={ex9Width}\n              height={ex9Height}\n              fill=\"blue\"\n            />\n            <rect\n              x=\"20\"\n              y=\"50\"\n              width={ex9Width}\n              height={ex9Height}\n              fill=\"red\"\n            />\n          </Animator>\n        </svg>\n        <div>\n          <input\n            type=\"text\"\n            value={tempEx9Width}\n            onChange={(e) => setTempEx9Width(e.target.value)}\n          />\n          x\n          <input\n            type=\"text\"\n            value={tempEx9Height}\n            onChange={(e) => setTempEx9Height(e.target.value)}\n          />\n          <button\n            onClick={() => {\n              setEx9Width(parseInt(tempEx9Width, 10))\n              setEx9Height(parseInt(tempEx9Height, 10))\n            }}\n          >\n            Update dimensions\n          </button>\n        </div>\n      </div>\n\n      <div className=\"code\">\n        <div>\n          The AnimationConsumer can help you pass values to children, even if\n          the child doesn&apos;t use the animated prop directly.\n        </div>\n        <code>{example5}</code>\n      </div>\n      <div className=\"example\">\n        <svg\n          viewBox=\"0 0 100 100\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"100\"\n          height=\"100\"\n        >\n          <Animator values={[\"rotate\"]}>\n            <AnimationConsumer\n              rotate={ex5Rotate}\n              render={({ rotate }) => (\n                <g transform={`rotate(${rotate},25,25)`}>\n                  <rect x=\"10\" y=\"10\" width=\"30\" height=\"30\" fill=\"blue\" />\n                </g>\n              )}\n            />\n          </Animator>\n        </svg>\n        <div>\n          <input\n            type=\"text\"\n            value={tempEx5Rotate}\n            onChange={(e) => setTempEx5Rotate(parseInt(e.target.value, 10))}\n          />\n          <button\n            onClick={() => {\n              setEx5Rotate(tempEx5Rotate)\n            }}\n          >\n            Update rotation\n          </button>\n        </div>\n      </div>\n\n      <div className=\"code\">\n        <div>\n          Custom easing functions can let you interpolate any values. Let&apos;s\n          animate some text typing!\n        </div>\n        <code>{example6}</code>\n      </div>\n      <div className=\"example\">\n        <div>\n          <input\n            type=\"text\"\n            value={tempEx6Text}\n            onChange={(e) => setTempEx6Text(e.target.value)}\n          />\n          <button\n            onClick={() => {\n              setEx6Text(tempEx6Text)\n            }}\n          >\n            Update text\n          </button>\n        </div>\n        <div>\n          <Animator\n            values={[\"text\"]}\n            duration={5000}\n            defaultEasing={({ from, to, percent }) => {\n              let i = 0\n              while (from.charAt(i) === to.charAt(i)) {\n                i++\n              }\n              if (percent < 0.5) {\n                return from.substr(\n                  0,\n                  i + Math.floor((1 - percent * 2) * (from.length - i))\n                )\n              } else {\n                return to.substr(\n                  0,\n                  i + Math.floor((percent - 0.5) * 2 * (to.length - i))\n                )\n              }\n            }}\n          >\n            <AnimationConsumer\n              text={ex6Text}\n              render={({ text }) => <span>{text}</span>}\n            />\n          </Animator>\n        </div>\n      </div>\n\n      <div className=\"code\">\n        <div>\n          The useInterpolate hook may make sense for your project, if you want\n          to handle animation completely within a component.\n        </div>\n        <code>{example7}</code>\n      </div>\n      <div className=\"example\">\n        {\" \"}\n        <svg\n          viewBox=\"0 0 100 100\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"100\"\n          height=\"100\"\n        >\n          <MyRect x={ex7X} y={ex7Y} />\n        </svg>\n        <div>\n          <input\n            type=\"text\"\n            value={tempEx7X}\n            onChange={(e) => setTempEx7X(parseInt(e.target.value, 10))}\n          />\n          <input\n            type=\"text\"\n            value={tempEx7Y}\n            onChange={(e) => setTempEx7Y(parseInt(e.target.value, 10))}\n          />\n          <button\n            onClick={() => {\n              setEx7X(tempEx7X)\n              setEx7Y(tempEx7Y)\n            }}\n          >\n            Update coordinates\n          </button>\n        </div>\n      </div>\n\n      <div style={{ gridColumnStart: \"span 2\" }} className=\"header\">\n        <div>\n          And that&apos;s it! Have fun, and read the source if you get stuck -\n          there are lots of comments as well as additional options that you can\n          use to govern easing functions, initial values, and duration.\n        </div>\n        <div>\n          Use either the HOC wrapper or the hook - go with whatever works\n          easiest for your project. Enjoy!\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}